#You have been given a head to a singly linked list of integers. Write a function check to whether the list given is a 'Palindrome' or not.


public class Solution {

    public static boolean isPalindrome(Node<Integer> head) {
        if (head == null || head.next == null) {
            return true; // A list with 0 or 1 node is a palindrome.
        }

        // Step 1: Find the middle of the linked list.
        Node<Integer> slow = head;
        Node<Integer> fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse the second half of the linked list.
        Node<Integer> secondHalf = reverseLinkedList(slow);
        Node<Integer> secondHalfCopy = secondHalf; // Save for restoring later.

        // Step 3: Compare the two halves.
        Node<Integer> firstHalf = head;
        while (secondHalf != null) {
            if (!firstHalf.data.equals(secondHalf.data)) {
                return false; // Mismatch found, not a palindrome.
            }
            firstHalf = firstHalf.next;
            secondHalf = secondHalf.next;
        }

        // Step 4: Restore the original structure of the list (optional).
        reverseLinkedList(secondHalfCopy);

        return true; // All elements matched, the list is a palindrome.
    }

    private static Node<Integer> reverseLinkedList(Node<Integer> head) {
        Node<Integer> prev = null;
        Node<Integer> current = head;
        Node<Integer> next;

        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }

        return prev;
    }
}
