# in this code here are also two methods first is using three pointer same as we seen in pair sum program and 
second one is using three loops initialising i,j and k
where i=0;j=i+1;k=j+1 and returning the count


import java.util.Arrays;

public class Solution {	

    public static int tripletSum(int[] arr, int num) {
        int count = 0;

        // Sort the array
        Arrays.sort(arr);

        // Iterate through each element as the first element of the triplet
        for (int i = 0; i < arr.length - 2; i++) {
            int left = i + 1;
            int right = arr.length - 1;

            while (left < right) {
                int sum = arr[i] + arr[left] + arr[right];

                if (sum == num) {
                    count++; // Valid triplet found
                    left++;
                    right--;
                } else if (sum < num) {
                    left++; // Move left pointer forward
                } else {
                    right--; // Move right pointer backward
                }
            }
        }

        return count;
    }

    public static void main(String[] args) {
        int[] arr = {6, 1, 6, 5, 3, 2, 5, 0, 5, 6, 0};
        int num = 11;
        int result = tripletSum(arr, num);

        System.out.println("Number of triplets with sum " + num + ": " + result);
    }
}
---------------------------------------------------------------------------------------------------------------------------


public class Solution {

    public static int tripletSum(int[] arr, int num) {
        int count = 0;

        // Use three nested loops to find triplets
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                for (int k = j + 1; k < arr.length; k++) {
                    if (arr[i] + arr[j] + arr[k] == num) {
                        count++;
                    }
                }
            }
        }

        return count;
    }

    public static void main(String[] args) {
        int[] arr = {6, 1, 6, 5, 3, 2, 5, 0, 5, 6, 0};
        int num = 11;
        int result = tripletSum(arr, num);
        System.out.println("Number of triplets with sum " + num + ": " + result);
    }
}

-------------------------------------------------------------------------------------------------------------------------------

# to avoid duplicates this one code is useful where inner 2 while loop will specifically check for duplicates value
form left to right and right to left and two pntrs will count this.

import java.util.Arrays;

public class Solution {	

    public static int tripletSum(int[] arr, int num) {
        int count = 0;
        // Sort the array
        Arrays.sort(arr);
        for (int i = 0; i < arr.length - 2; i++) {
        int left = i + 1;
        int right = arr.length - 1;
            while (left < right) {
                long sum = (long) arr[i] + arr[left] + arr[right];
                  if (sum == num) { 
                    if (arr[left] == arr[right]) { 
                        count += (right - left + 1) * (right - left) / 2;
                        break;
                    } else { 
                        int cnt1 = 1, cnt2 = 1;
                        while (left + 1 < right && arr[left] == arr[left + 1]) {
                            cnt1++;
                            left++;
                        }
                        while (right - 1 > left && arr[right] == arr[right - 1]) {
                            cnt2++;
                            right--;
                        }
                        count += cnt1 * cnt2;
                        left++;
                        right--;
                    }
                } else if (sum > num) { 
                    right--; 
                } else { 
                    left++; 
                }
            }
        }
        return count;
	}
}
