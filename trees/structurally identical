#Problem statement
Given two Generic trees, return true if they are structurally identical i.e. they are made of nodes with the same values arranged in the same way.






public class Solution {

    public static boolean checkIdentical(TreeNode<Integer> root1, TreeNode<Integer> root2) {
        // Base case: if both roots are null, they are identical
        if (root1 == null && root2 == null) {
            return true;
        }

        // If one root is null and the other is not, they are not identical
        if (root1 == null || root2 == null) {
            return false;
        }

        // If the data in the root nodes is different, they are not identical
        if (!root1.data.equals(root2.data)) {
            return false;
        }

        // If the number of children is different, they are not identical
        if (root1.children.size() != root2.children.size()) {
            return false;
        }

        // Recursively check if the subtrees are identical
        for (int i = 0; i < root1.children.size(); i++) {
            TreeNode<Integer> child1 = root1.children.get(i);
            TreeNode<Integer> child2 = root2.children.get(i);

            if (!checkIdentical(child1, child2)) {
                return false;
            }
        }

        // If all checks passed, the trees are identical
        return true;
    }
}
