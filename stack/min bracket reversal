#For a given expression in the form of a string, find the minimum number of brackets that can be reversed in order to make
the expression balanced. The expression will only contain curly brackets.
If the expression can't be balanced, return -1.
Example:
Expression: {{{{
If we reverse the second and the fourth opening brackets, the whole expression will get balanced. Since we have to reverse 
two brackets to make the expression balanced, the expected output will be 2.
Expression: {{{
In this example, even if we reverse the last opening bracket, we would be left with the first opening
bracket and hence will not be able to make the expression balanced and the output will be -1.
-----------------------------------------------------------------------------------------------------------------------------------

import java.util.Stack;

public class Solution {

    public static int countBracketReversals(String input) {
        int length = input.length();

        // If the length of the expression is odd, it can't be balanced
        if (length % 2 != 0) {
            return -1;
        }

        Stack<Character> stack = new Stack<>();

        // Push and pop brackets to find unbalanced ones
        for (int i = 0; i < length; i++) {
            char currentChar = input.charAt(i);

            if (currentChar == '{') {
                stack.push(currentChar);
            } else {
                // If stack is not empty and the top is an opening bracket, pop it
                if (!stack.isEmpty() && stack.peek() == '{') {
                    stack.pop();
                } else {
                    // Push closing bracket if no matching opening bracket
                    stack.push(currentChar);
                }
            }
        }

        // Count the unbalanced brackets
        int openBrackets = 0, closeBrackets = 0;
        while (!stack.isEmpty()) {
            if (stack.pop() == '{') {
                openBrackets++;
            } else {
                closeBrackets++;
            }
        }

        // To balance, we need ceil(openBrackets / 2) + ceil(closeBrackets / 2)
        return (openBrackets + 1) / 2 + (closeBrackets + 1) / 2;
    }
}
