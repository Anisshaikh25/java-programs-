#For a given a string expression containing only round brackets or parentheses, check if they are balanced or not.
#Brackets are said to be balanced if the bracket which opens last, closes first.

#Expression: (()())
Since all the opening brackets have their corresponding closing brackets, we say it is balanced and hence the output will be, 'true'.
You need to return a boolean value indicating whether the expression is balanced or not.

-------------------------------------------------------------------------------------------------------------------



import java.util.Stack;

public class Solution {

    public static boolean isBalanced(String expression) {
        // Create a stack to keep track of opening brackets
        Stack<Character> stack = new Stack<>();

        // Iterate through the expression
        for (int i = 0; i < expression.length(); i++) {
            char currentChar = expression.charAt(i);

            // If it's an opening bracket, push it onto the stack
            if (currentChar == '(') {
                stack.push(currentChar);
            }
            // If it's a closing bracket
            else if (currentChar == ')') {
                // Check if stack is empty (no matching opening bracket)
                if (stack.isEmpty()) {
                    return false;
                }
                // Pop the last opening bracket
                stack.pop();
            }
        }

        // If the stack is empty, all brackets are balanced
        return stack.isEmpty();
    }
}
